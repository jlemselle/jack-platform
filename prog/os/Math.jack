/**
 * A library of commonly used mathematical functions.
 * Note: Jack compilers implement multiplication and division using OS method calls.
 */
class Math {
    static Array twoToThe;

    /** Initializes the library. */
    function void init() {
        let twoToThe = Array.new(16);
        let twoToThe[0] = 1;
        let twoToThe[1] = 2;
        let twoToThe[2] = 4;
        let twoToThe[3] = 8;
        let twoToThe[4] = 16;
        let twoToThe[5] = 32;
        let twoToThe[6] = 64;
        let twoToThe[7] = 128;
        let twoToThe[8] = 256;
        let twoToThe[9] = 512;
        let twoToThe[10] = 1024;
        let twoToThe[11] = 2048;
        let twoToThe[12] = 4096;
        let twoToThe[13] = 8192;
        let twoToThe[14] = 16384;
        let twoToThe[15] = ~32767;
        return;
    }

    /** Returns the absolute value of x. */
    function int abs(int x) {
        if (x < 0) {
            return -x;
        }
        return x;
    }

    /** Returns the product of x and y. 
     *  When a Jack compiler detects the multiplication operator '*' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x*y and multiply(x,y) return the same value.
     */
     function int multiply(int x, int y) {
        var int i, shiftedX, result;
        
        let i = 0;
        let shiftedX = x;
        let result = 0;

        while (i < 16) {
            if (Math.bit(y, i) = true) {
                let result = result + shiftedX;
            }

            let shiftedX = shiftedX + shiftedX;
            let i = i + 1;
        }

        return result;
    }
    
    function int bit(int x, int b) {
        return ~((x & twoToThe[b]) = 0);
    }   

    /** Returns the integer part of x/y.
     *  When a Jack compiler detects the division operator '/' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x/y and divide(x,y) return the same value.
     */
    function int divide(int x, int y) {
        var int result;

        if (y = 0) {
            return 0;
        }

        let result = Math.divideAbs(Math.abs(x), Math.abs(y));
        if (x < 0) {
            let result = -result;
        }
        if (y < 0) {
            let result = -result;
        }

        return result;
    }

    function int divideAbs(int x, int y) {
        var int q;
        
        if (y < 0)
        {
            return 0;
        }

        if (y > x)
        {
            return 0;
        }

        let q = Math.divideAbs(x, y + y);
        if ((x - Math.multiply(q + q, y)) < y)
        {
            return q + q;
        }
        else
        {
            return q + q + 1;
        }
    }
    
    /** Returns the integer part of the square root of x. */
    function int sqrt(int x) {
        var int result, bitPosition, approxRoot;
        let result = 0;
        let bitPosition = 7;
        let approxRoot = 0;

        while (~(bitPosition < 0))
        {
            let approxRoot = result + twoToThe[bitPosition];
            let approxRoot = Math.multiply(approxRoot, approxRoot);
            if ((~(approxRoot > x)) & (approxRoot > 0)) {
                let result = result + twoToThe[bitPosition];
            }
            let bitPosition = bitPosition - 1;
        }
        
        return result;
    }

    /** Returns the greater number. */
    function int max(int a, int b) {
        if (a > b) {
            return a;
        }
        return b;
    }

    /** Returns the smaller number. */
    function int min(int a, int b) {
        if (a < b) {
            return a;
        }
        return b;
    }
}
